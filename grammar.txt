<program> --> <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> --> <moduleDeclaration> <moduleDeclarations>
<moduleDeclarations> --> EPSILON
<moduleDeclaration> --> DECLARE MODULE ID SEMICOL
<otherModules> --> <module> <otherModules>
<otherModules> --> EPSILON
<driverModule> --> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> --> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> --> RETURNS SQBO <input_plist> SQBC SEMICOL
<ret> --> EPSILON
<input_plist> --> ID COLON <dataType> <N1> 
<N1> --> COMMA ID COLON <dataType> <N1>
<N1> --> EPSILON
<idListComma> --> ID <N3>
<N3> --> COMMA ID <N3>
<N3> --> EPSILON
<dataType> --> INTEGER
<dataType> --> REAL
<dataType> --> BOOLEAN
<dataType> --> ARRAY SQBO <range_arrays> SQBC OF <type>
<range_arrays> --> <index_arr> RANGEOP <index_arr>
<type> --> INTEGER
<type> --> REAL
<type> --> BOOLEAN
<moduleDef> --> START <statements> END
<statements> --> <statement> <statements>
<statements> --> EPSILON
<statement> --> <ioStmt>
<statement> --> <simpleStmt>
<statement> --> <declareStmt>
<statement> --> <condionalStmt>
<statement> --> <iterativeStmt>
<ioStmt> --> GET_VALUE BO ID BC SEMICOL
<ioStmt> --> PRINT BO <var_print> BC SEMICOL
<boolConstt> --> TRUE
<boolConstt> --> FALSE
<id_num_rnum> --> ID
<id_num_rnum> --> NUM
<id_num_rnum> --> RNUM
<var_print> --> <boolConstt>
<var_print> --> ID <P1>
<var_print> --> NUM
<var_print> --> RNUM
<P1> --> SQBO <index_arr> SQBC
<P1> --> EPSILON
<simpleStmt> --> <assignmentStmt>
<simpleStmt> --> <moduleReuseStmt>
<assignmentStmt> --> ID <whichStmt>
<whichStmt> --> <lvalueIDStmt>
<whichStmt> --> <lvalueARRStmt>
<lvalueIDStmt> --> ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> --> SQBO <element_index_with_expressions> SQBC ASSIGNOP <expression> SEMICOL
<index_arr> --> <sign> <new_index>
<new_index> --> NUM
<new_index> --> ID
<sign> --> PLUS
<sign> --> MINUS
<sign> --> EPSILON
<moduleReuseStmt> --> <optional>  USE MODULE ID WITH PARAMETERS <actual_para_list> SEMICOL
<actual_para_list> --> <sign> <K> <actual_para_list_dash>
<actual_para_list_dash> --> COMMA <sign> <K> <actual_para_list_dash>
<actual_para_list_dash> --> EPSILON
<K> --> NUM
<K> --> RNUM
<K> --> <boolConstt>
<K> --> ID <N_11>
<N_11> --> SQBO <element_index_with_expressions> SQBC
<N_11> --> EPSILON
<optional> --> SQBO <idListComma> SQBC ASSIGNOP
<optional> --> EPSILON
<expression> --> <arithmeticOrBooleanExpr>
<expression> --> <U>
<U> --> <unary_op> <new_NT>
<new_NT> --> BO <arithmeticExpr> BC
<new_NT> --> <var_id_num>
<var_id_num> -->  ID
<var_id_num> -->  NUM 
<var_id_num> -->  RNUM 
<unary_op> --> PLUS
<unary_op> --> MINUS
<arithmeticOrBooleanExpr> --> <AnyTerm> <N7>
<N7> --> <logicalOp> <AnyTerm> <N7>
<N7> --> EPSILON
<AnyTerm> --> <arithmeticExpr> <N8>
<N8> --> <relationalOp> <arithmeticExpr>
<N8> --> EPSILON
<arithmeticExpr> --> <term> <N4>
<N4> --> <op1> <term> <N4>
<N4> --> EPSILON
<term> --> <factor> <N5> 
<N5> --> <op2> <factor> <N5>
<N5> --> EPSILON
<factor> --> BO <arithmeticOrBooleanExpr> BC
<factor> --> NUM
<factor> --> RNUM
<factor> --> ID <N_11>
<factor> --> <boolConstt>
<element_index_with_expressions> --> <op1> <N_10>
<element_index_with_expressions> --> <arrExpr>
<arrExpr> --> <arrTerm> <arr_N4>
<arr_N4> --> <op1> <arrTerm> <arr_N4>
<arr_N4> --> EPSILON 
<arrTerm> --> <arrFactor> <arr_N5>
<arr_N5> --> <op2> <arrFactor> <arr_N5>
<arr_N5> --> EPSILON
<arrFactor> --> ID
<arrFactor> --> NUM
<arrFactor> --> <boolConstt>
<arrFactor> --> BO <arrExpr> BC
<N_10> --> <new_index>
<N_10> --> BO <arrExpr> BC
<op1> --> PLUS
<op1> --> MINUS
<op2> --> MUL
<op2> --> DIV
<logicalOp> --> AND
<logicalOp> --> OR
<relationalOp> --> LT
<relationalOp> --> LE
<relationalOp> --> GT
<relationalOp> --> GE
<relationalOp> --> EQ
<relationalOp> --> NE
<declareStmt> --> DECLARE <idListComma> COLON <dataType> SEMICOL
<condionalStmt> --> SWITCH BO ID BC START <caseStmts> <deFault> END
<caseStmts> --> CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> --> CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> --> EPSILON
<value> --> NUM
<value> --> TRUE
<value> --> FALSE
<deFault> --> DEFAULT COLON <statements> BREAK SEMICOL
<deFault> --> EPSILON
<iterativeStmt> --> FOR BO ID IN <range_for_loop> BC START <statements> END
<iterativeStmt> --> WHILE BO <arithmeticOrBooleanExpr> BC START <statements> END
<range_for_loop> --> <index_for_loop> RANGEOP <index_for_loop>
<index_for_loop> --> <sign_for_loop> <new_index_for_loop>
<new_index_for_loop> --> NUM
<sign_for_loop> --> PLUS
<sign_for_loop> --> MINUS
<sign_for_loop> --> EPSILON